# -*- coding: utf-8 -*-
"""Python Basic Assignment_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cnegkMrC0l1YCA9g2g8q80x4aMs4hQKf

> 1. What are the two values of the boolean data types? how do you write them ?

**Ans**
"""

# True and False are the two types of boolean
x=True
y=False
print(x,type(x))
print(y,type(y))

"""> 2. What are the three different types of Boolean operators?

**Ans** `or` , `and` , `not` are three types of boolean operator
"""

x=1
y=6

# or boolean
print(x < 5 or y > 5 )

# and boolean
print(x < 5 and y > 5)

# not boolean
print(not(x>5))

"""> 3. Make a list of each Boolean operator's truth tables (i.e. every possible combination of Boolean values for the operator and what it evaluate) ?

**Ans** 
The Truth tables for the boolean tables are as follows:

> Truth Table for and operaotor
* True and True is True
* True and False is False
* False and True is False
* False and False is False


> Truth Table for or operaotor
* True and True is True
* True and False is True
* False and True is True
* False and False is False

> Truth Table for not operaotor
* True not is False 
* False not is True

> 4. What are the values of the following expressions ?

* (5 > 4) and (3 == 5)
* not (5 > 4)
* (5 > 4) or (3 == 5)
* not ((5 > 4) or (3 == 5))
* (True and True) and (True == False)
* (not False) or (not True)
"""

(5 > 4) and (3 == 5)

not (5 > 4)

(5 > 4) or (3 == 5)

not ((5 > 4) or (3 == 5))

(True and True) and (True == False)

(not False) or (not True)

"""> 5. What are the six comparison operators?

*Ans* : 
>
* != 
* <  
* <= 
* => , >
* ==

> 6. How do you tell the difference between the equal to and assignment operators?Describe a condition and when you would use one ?

**Ans**

* == the equal to operator compares two values and give result in Boolean

* =  the assignment operator stores a value in a variable.
"""

x = 10
x = y
print(x)
print(y)

x == y

"""> 7. Identify the three blocks in this code:

spam = 0

if spam == 10:

print('eggs')

if spam > 5:

print('bacon')

else:

print('ham')

print('spam')

print('spam')
"""

spam = 0

if spam == 10:
  print('eggs')  # block 1

if spam > 5:
  print('bacon')  # block 2

else:
  print('ham')
  print('spam')
  print('spam') # block 3

"""> 8. Write code that prints Hello 

if 1 is stored in spam, 

prints Howdy if 2 is stored in spam,

and 

prints Greetings! 

if anything else is stored in spam.
"""

def Code(spam):
    if spam==1:
        print('Hello')
    elif spam==2:
        print('Howdy')
    else:
        print('Greetings')
        
Code(1) 
Code(2)
Code(3)

"""> 9. If your programme is stuck in an endless loop, what keys youâ€™ll press?

**Ans:** Press Ctrl-C to stop a program stuck in an endless loop

> 10. How can you tell the difference between break and continue?

**Ans:** 

The break statement will move the execution outside the loop if break condtion is satisfied.

Whereas the continue statement will move the execution to the start of the loop.

> 11. In a for loop, what is the difference between range(10), range(0, 10), and range(0, 10, 1)?

**Ans:**
"""

# printed range from 0 to 9 excluding 10 
for i in range(10):
  print(i)

# started the loop from 0 to 9 excluding 10
for i in range(0,10):
  print(i)

# started the loop from 0 to 9 and iterating variable by 1 
for i in range(0,10,1):
  print(i)

"""> 12. Write a short program that prints the numbers 1 to 10 using a for loop. Then write an equivalent program that prints the numbers 1 to 10 using a while loop ?"""

# using for loop
for i in range(1,11):
    print(i)

# Using while loop
i=1
while i <= 10:
    print(i)
    i+=1

"""> 13. 
If you had a function named bacon() inside a module named spam, 
how would you call it after importing spam ?

Ans: This function can be called with spam.bacon()
"""

